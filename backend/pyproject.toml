[tool.poetry]
name = "hackathon-abitour"
version = "0.1.0"
description = ""
authors = ["one-zero-eight <https://t.me/one_zero_eight>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = { extras = ["all"], version = "^0.110.0" }
pydantic = "^2.7.0"
cryptography = "^42.0.5"
authlib = "^1.3.0"
passlib = "^1.7.4"
bcrypt = "^4.1.2"
motor = "^3.4.0"
pyyaml = "^6.0.1"
uvicorn = "^0.29.0"
colorlog = "^6.8.2"
beanie = "^1.25.0"
python-magic = "^0.4.27"
pyvips = "^2.2.2"

[tool.poetry.group.prod.dependencies]
gunicorn = "21.2.0"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
ruff = "^0.3.0"
pre-commit = "^3.6.2"
fastapi-mock = "^0.3.4"
mypy = "^1.9.0"
types-cryptography = "^3.3.23.2"
types-pytz = "^2024.1.0.20240203"
types-pyyaml = "^6.0.12.20240311"
types-passlib = "^1.7.7.20240311"
types-tqdm = "^4.66.0.20240106"
types-aiofiles = "^23.2.0.20240311"
types-orjson = "^3.6.2"
motor-types = "^1.0.0b4"


[tool.poetry.group.ci]
optional = true
[tool.poetry.group.ci.dependencies]
pydantic = "^2.7.0"
pre-commit = "^3.6.2"
ruff = "^0.3.0"

[tool.mypy]
plugins = "pydantic.mypy"
allow_redefinition = true

[tool.pydantic-mypy]
# setup pydantic plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
# ignore socketio types
module = "socketio.*"
ignore_missing_imports = true
[[tool.mypy.overrides]]
# ignore authlib types
module = "authlib.jose.*"
ignore_missing_imports = true
[[tool.mypy.overrides]]
# ignore socketio types
module = "pyvips.*"
ignore_missing_imports = true


[tool.pytest.ini_options]
pythonpath = "."
testpaths = "tests"
addopts = [
    "--strict-config",
    "--strict-markers",
]

[tool.ruff]
line-length = 120
lint.ignore = [
    # wildcard imports are fine
    "F403",
    "F405",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = ["src/dev.py"]

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if enabled:",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about TYPE_CHECKING imports:
    "if TYPE_CHECKING:",
]

ignore_errors = true
