/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * AbiTour API
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
} from '@tanstack/vue-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse,
} from 'axios'
import {
  computed,
  unref,
} from 'vue'
import type {
  MaybeRef,
} from 'vue'
import { customFormData, customFormDataDocuments } from './form-data'

export interface ReviewsLikeReviewParams {
  like?: boolean
}

export interface ChattingGetDialogParams {
  dialog_id: string
}

export interface ChattingPushMessageParams {
  dialog_id: string
  message: string
}

export interface ChattingLeaveDialogParams {
  dialog_id: string
}

export type ChattingUpdateStudentsQueue200 = OnlineOfQueue | JoinDialog

export type ChattingUpdateQueue200 = OnlineOfQueue | JoinDialog

export type OrganizationsImportSpecificOrganization201 = Organization | null

export interface UsersApproveUserParams {
  is_approve: boolean
  comment?: string | null
}

export interface ProvidersTelegramLoginParams {
  hash: string
  id: number
  auth_date: number
  first_name: string
  last_name?: string | null
  username?: string | null
  photo_url?: string | null
}

export interface ProvidersTelegramConnectParams {
  hash: string
  id: number
  auth_date: number
  first_name: string
  last_name?: string | null
  username?: string | null
  photo_url?: string | null
}

/**
 * –î–∞–Ω–Ω—ã–µ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞
 */
export type ViewUserTelegram = TelegramWidgetData | null

export type ViewUserStudentApprovementAnyOf = PendingApprovement | ApprovedApprovement | RejectedApprovement

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
 */
export type ViewUserStudentApprovement = ViewUserStudentApprovementAnyOf | null

/**
 * –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
 */
export type ViewUserLogin = string | null

export interface ViewUser {
  /** –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  documents: string[]
  /** MongoDB document ObjectID */
  id: string
  /** –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π) */
  login: ViewUserLogin
  /** –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  name: string
  /** –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  role: UserRole
  /** –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ */
  student_approvement: ViewUserStudentApprovement
  /** –î–∞–Ω–Ω—ã–µ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ */
  telegram: ViewUserTelegram
}

export type ValidationErrorLocItem = string | number

export interface ValidationError {
  loc: ValidationErrorLocItem[]
  msg: string
  type: string
}

export type UserRole = typeof UserRole[keyof typeof UserRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  admin: 'admin',
  moderator: 'moderator',
  default: 'default',
} as const

export type UpdateSceneTitle = string | null

export type UpdateSceneOrganization = string | null

export type UpdateSceneFile = string | null

export interface UpdateScene {
  file?: UpdateSceneFile
  meta?: unknown
  organization?: UpdateSceneOrganization
  title?: UpdateSceneTitle
}

/**
 * –ü—Å–µ–≤–¥–æ–Ω–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
 */
export type UpdateOrganizationUsername = string | null

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
 */
export type UpdateOrganizationRegionName = string | null

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type UpdateOrganizationName = string | null

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type UpdateOrganizationMainScene = string | null

/**
 * –õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type UpdateOrganizationLogo = string | null

/**
 * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
 */
export type UpdateOrganizationInRegistryId = string | null

/**
 * –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type UpdateOrganizationFullName = string | null

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞
 */
export type UpdateOrganizationFederalDistrictName = string | null

/**
 * –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type UpdateOrganizationEducationalPrograms = EducationalProgramSchemaInput[] | null

/**
 * –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type UpdateOrganizationContacts = ContactsSchemaInput | null

export interface UpdateOrganization {
  /** –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  contacts?: UpdateOrganizationContacts
  /** –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  documents?: unknown
  /** –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  educational_programs?: UpdateOrganizationEducationalPrograms
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞ */
  federal_district_name?: UpdateOrganizationFederalDistrictName
  /** –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  full_name?: UpdateOrganizationFullName
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ */
  in_registry_id?: UpdateOrganizationInRegistryId
  /** –õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  logo?: UpdateOrganizationLogo
  /** –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  main_scene?: UpdateOrganizationMainScene
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  name?: UpdateOrganizationName
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ */
  region_name?: UpdateOrganizationRegionName
  /** –ü—Å–µ–≤–¥–æ–Ω–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π) */
  username?: UpdateOrganizationUsername
}

export type UpdateFileMustBeUploaded = boolean | null

export type UpdateFileFriendlyName = string | null

export interface UpdateFile {
  friendly_name?: UpdateFileFriendlyName
  must_be_uploaded?: UpdateFileMustBeUploaded
}

export type TelegramWidgetDataUsername = string | null

export type TelegramWidgetDataPhotoUrl = string | null

export type TelegramWidgetDataLastName = string | null

export interface TelegramWidgetData {
  auth_date: number
  first_name: string
  hash: string
  id: number
  last_name?: TelegramWidgetDataLastName
  photo_url?: TelegramWidgetDataPhotoUrl
  username?: TelegramWidgetDataUsername
}

export interface TelegramLoginResponse {
  need_to_connect: boolean
}

export type SceneMeta = unknown | null

export interface Scene {
  file: string
  /** MongoDB document ObjectID */
  id: string
  meta: SceneMeta
  organization: string
  title: string
}

/**
 * –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
 */
export type ReviewWithOrganizationInfoText = string | null

export interface ReviewWithOrganizationInfo {
  /** –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ */
  at: string
  /** MongoDB document ObjectID */
  id: string
  /** –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –æ—Ç–∑—ã–≤ */
  liked_by: string[]
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Ç–∑—ã–≤ */
  organization_id: string
  organization_name: string
  organization_username: string
  /**
   * –û—Ü–µ–Ω–∫–∞
   * @minimum 1
   * @maximum 5
   */
  rate: number
  /** –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ */
  text: ReviewWithOrganizationInfoText
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –æ—Ç–∑—ã–≤ */
  user_id: string
}

/**
 * –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
 */
export type ReviewText = string | null

export interface Review {
  /** –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ */
  at: string
  /** MongoDB document ObjectID */
  id: string
  /** –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –æ—Ç–∑—ã–≤ */
  liked_by: string[]
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Ç–∑—ã–≤ */
  organization_id: string
  /**
   * –û—Ü–µ–Ω–∫–∞
   * @minimum 1
   * @maximum 5
   */
  rate: number
  /** –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ */
  text: ReviewText
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –æ—Ç–∑—ã–≤ */
  user_id: string
}

export type RejectedApprovementStatus = typeof RejectedApprovementStatus[keyof typeof RejectedApprovementStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RejectedApprovementStatus = {
  rejected: 'rejected',
} as const

/**
 * ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –æ—Ç–∫–ª–æ–Ω–∏–≤—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
 */
export type RejectedApprovementModeratorId = string | null

export interface RejectedApprovement {
  /** –î–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ */
  at: string
  /** –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç */
  comment: string
  /** ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –æ—Ç–∫–ª–æ–Ω–∏–≤—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ */
  moderator_id: RejectedApprovementModeratorId
  /** ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç */
  organization_id: string
  status: RejectedApprovementStatus
}

export interface PostReview {
  /**
   * @minimum 1
   * @maximum 5
   */
  rate: number
  text: string
}

export type PendingApprovementStatus = typeof PendingApprovementStatus[keyof typeof PendingApprovementStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PendingApprovementStatus = {
  pending: 'pending',
} as const

/**
 * ID –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
 */
export type PendingApprovementAttachment = string | null

export interface PendingApprovement {
  /** ID –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ */
  attachment: PendingApprovementAttachment
  /** ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç */
  organization_id: string
  status: PendingApprovementStatus
}

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
 */
export type OrganizationRegionName = string | null

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type OrganizationMainScene = string | null

/**
 * –õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type OrganizationLogo = string | null

/**
 * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
 */
export type OrganizationInRegistryId = string | null

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞
 */
export type OrganizationFederalDistrictName = string | null

/**
 * –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type OrganizationContacts = ContactsSchemaOutput | null

export interface Organization {
  /** –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  contacts: OrganizationContacts
  /** –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  documents: unknown
  /** –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  educational_programs: EducationalProgramSchemaOutput[]
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞ */
  federal_district_name: OrganizationFederalDistrictName
  /** –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  full_name: string
  /** MongoDB document ObjectID */
  id: string
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ */
  in_registry_id: OrganizationInRegistryId
  /** –õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  logo: OrganizationLogo
  /** –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  main_scene: OrganizationMainScene
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  name: string
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ */
  region_name: OrganizationRegionName
  /** –ü—Å–µ–≤–¥–æ–Ω–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π) */
  username: string
}

export type OnlineOfQueueType = typeof OnlineOfQueueType[keyof typeof OnlineOfQueueType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OnlineOfQueueType = {
  online: 'online',
} as const

export interface OnlineOfQueue {
  queue_enrollees_online: number
  queue_students_online: number
  type: OnlineOfQueueType
}

export interface MessageSchema {
  /** –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */
  at: string
  /** ID —Å–æ–æ–±—â–µ–Ω–∏—è */
  id: string
  /** –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è */
  text: string
  /** ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ */
  user_id: string
}

export type JoinDialogType = typeof JoinDialogType[keyof typeof JoinDialogType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JoinDialogType = {
  join_dialog: 'join_dialog',
} as const

export interface JoinDialog {
  dialog_id: string
  type: JoinDialogType
}

export interface HTTPValidationError {
  detail?: ValidationError[]
}

/**
 * –¢–∏–ø —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, image/png)
 */
export type FileType = string | null

/**
 * –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 */
export type FileSize = number | null

/**
 * –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
 */
export type FileFriendlyName = string | null

/**
 * –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
 */
export type FileFileUpdatedAt = string | null

export interface File {
  /** –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ */
  file_updated_at: FileFileUpdatedAt
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) */
  friendly_name: FileFriendlyName
  /** MongoDB document ObjectID */
  id: string
  /** –î–æ–ª–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –≥–æ–ª—å—Ñ-–∫–∞—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ—Ç) */
  must_be_uploaded: boolean
  /** –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö */
  size: FileSize
  /** –¢–∏–ø —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, image/png) */
  type: FileType
}

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
 */
export type EducationalProgramSchemaOutputUgsName = string | null

/**
 * –ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
 */
export type EducationalProgramSchemaOutputUgsCode = string | null

/**
 * –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞
 */
export type EducationalProgramSchemaOutputQualification = string | null

/**
 * –ö–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
export type EducationalProgramSchemaOutputProgramCode = string | null

/**
 * –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è
 */
export type EducationalProgramSchemaOutputEduNormativePeriod = string | null

export interface EducationalProgramSchemaOutput {
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è */
  edu_level_name: string
  /** –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è */
  edu_normative_period: EducationalProgramSchemaOutputEduNormativePeriod
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ */
  in_registry_id: string
  /** –ö–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã */
  program_code: EducationalProgramSchemaOutputProgramCode
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã */
  program_name: string
  /** –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞ */
  qualification: EducationalProgramSchemaOutputQualification
  /** –ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ */
  ugs_code: EducationalProgramSchemaOutputUgsCode
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ */
  ugs_name: EducationalProgramSchemaOutputUgsName
}

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
 */
export type EducationalProgramSchemaInputUgsName = string | null

/**
 * –ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
 */
export type EducationalProgramSchemaInputUgsCode = string | null

/**
 * –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞
 */
export type EducationalProgramSchemaInputQualification = string | null

/**
 * –ö–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
export type EducationalProgramSchemaInputProgramCode = string | null

/**
 * –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è
 */
export type EducationalProgramSchemaInputEduNormativePeriod = string | null

export interface EducationalProgramSchemaInput {
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è */
  edu_level_name: string
  /** –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è */
  edu_normative_period?: EducationalProgramSchemaInputEduNormativePeriod
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ */
  in_registry_id: string
  /** –ö–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã */
  program_code?: EducationalProgramSchemaInputProgramCode
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã */
  program_name: string
  /** –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞ */
  qualification?: EducationalProgramSchemaInputQualification
  /** –ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ */
  ugs_code?: EducationalProgramSchemaInputUgsCode
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ */
  ugs_name?: EducationalProgramSchemaInputUgsName
}

export type EducationalProgramOutUgsName = string | null

export type EducationalProgramOutUgsCode = string | null

export type EducationalProgramOutQualification = string | null

export type EducationalProgramOutProgramName = string | null

export type EducationalProgramOutProgramCode = string | null

export type EducationalProgramOutEduNormativePeriod = string | null

export type EducationalProgramOutEduLevelName = string | null

export interface EducationalProgramOut {
  edu_level_name: EducationalProgramOutEduLevelName
  edu_normative_period: EducationalProgramOutEduNormativePeriod
  in_registry_id: string
  program_code: EducationalProgramOutProgramCode
  program_name: EducationalProgramOutProgramName
  qualification: EducationalProgramOutQualification
  ugs_code: EducationalProgramOutUgsCode
  ugs_name: EducationalProgramOutUgsName
}

/**
 * –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
 */
export type DialogTitle = string | null

export interface Dialog {
  /** –ó–∞–∫—Ä—ã—Ç –ª–∏ –¥–∏–∞–ª–æ–≥ */
  closed: boolean
  /** ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ */
  enrollee_id: string
  /** MongoDB document ObjectID */
  id: string
  /** –°–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ */
  messages: MessageSchema[]
  /** ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  organization_id: string
  /** ID —Å—Ç—É–¥–µ–Ω—Ç–∞ */
  student_id: string
  /** –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ */
  title: DialogTitle
}

export type CreateSceneMeta = unknown | null

export interface CreateScene {
  file: string
  meta?: CreateSceneMeta
  organization: string
  title: string
}

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
 */
export type CreateOrganizationRegionName = string | null

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type CreateOrganizationMainScene = string | null

/**
 * –õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type CreateOrganizationLogo = string | null

/**
 * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
 */
export type CreateOrganizationInRegistryId = string | null

/**
 * –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞
 */
export type CreateOrganizationFederalDistrictName = string | null

/**
 * –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type CreateOrganizationContacts = ContactsSchemaInput | null

export interface CreateOrganization {
  /** –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  contacts?: CreateOrganizationContacts
  /** –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  documents?: unknown
  /** –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  educational_programs?: EducationalProgramSchemaInput[]
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞ */
  federal_district_name?: CreateOrganizationFederalDistrictName
  /** –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  full_name: string
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ */
  in_registry_id?: CreateOrganizationInRegistryId
  /** –õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  logo?: CreateOrganizationLogo
  /** –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  main_scene?: CreateOrganizationMainScene
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  name: string
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ */
  region_name?: CreateOrganizationRegionName
  /** –ü—Å–µ–≤–¥–æ–Ω–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π) */
  username: string
}

/**
 * –°–∞–π—Ç
 */
export type ContactsSchemaOutputWebsite = string | null

/**
 * –ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
 */
export type ContactsSchemaOutputPostAddress = string | null

/**
 * –¢–µ–ª–µ—Ñ–æ–Ω
 */
export type ContactsSchemaOutputPhone = string | null

/**
 * –û–ì–†–ù
 */
export type ContactsSchemaOutputOgrn = string | null

/**
 * –ö–ü–ü
 */
export type ContactsSchemaOutputKpp = string | null

/**
 * –ò–ù–ù
 */
export type ContactsSchemaOutputInn = string | null

/**
 * –§–∞–∫—Å
 */
export type ContactsSchemaOutputFax = string | null

/**
 * –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
 */
export type ContactsSchemaOutputEmail = string | null

export interface ContactsSchemaOutput {
  /** –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ */
  email: ContactsSchemaOutputEmail
  /** –§–∞–∫—Å */
  fax: ContactsSchemaOutputFax
  /** –ò–ù–ù */
  inn: ContactsSchemaOutputInn
  /** –ö–ü–ü */
  kpp: ContactsSchemaOutputKpp
  /** –û–ì–†–ù */
  ogrn: ContactsSchemaOutputOgrn
  /** –¢–µ–ª–µ—Ñ–æ–Ω */
  phone: ContactsSchemaOutputPhone
  /** –ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å */
  post_address: ContactsSchemaOutputPostAddress
  /** –°–∞–π—Ç */
  website: ContactsSchemaOutputWebsite
  [key: string]: any
}

/**
 * –°–∞–π—Ç
 */
export type ContactsSchemaInputWebsite = string | null

/**
 * –ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
 */
export type ContactsSchemaInputPostAddress = string | null

/**
 * –¢–µ–ª–µ—Ñ–æ–Ω
 */
export type ContactsSchemaInputPhone = string | null

/**
 * –û–ì–†–ù
 */
export type ContactsSchemaInputOgrn = string | null

/**
 * –ö–ü–ü
 */
export type ContactsSchemaInputKpp = string | null

/**
 * –ò–ù–ù
 */
export type ContactsSchemaInputInn = string | null

/**
 * –§–∞–∫—Å
 */
export type ContactsSchemaInputFax = string | null

/**
 * –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
 */
export type ContactsSchemaInputEmail = string | null

export interface ContactsSchemaInput {
  /** –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ */
  email?: ContactsSchemaInputEmail
  /** –§–∞–∫—Å */
  fax?: ContactsSchemaInputFax
  /** –ò–ù–ù */
  inn?: ContactsSchemaInputInn
  /** –ö–ü–ü */
  kpp?: ContactsSchemaInputKpp
  /** –û–ì–†–ù */
  ogrn?: ContactsSchemaInputOgrn
  /** –¢–µ–ª–µ—Ñ–æ–Ω */
  phone?: ContactsSchemaInputPhone
  /** –ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å */
  post_address?: ContactsSchemaInputPostAddress
  /** –°–∞–π—Ç */
  website?: ContactsSchemaInputWebsite
  [key: string]: any
}

/**
 * –õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 */
export type CompactOrganizationLogo = string | null

export interface CompactOrganization {
  /** MongoDB document ObjectID */
  id: string
  /** –õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  logo: CompactOrganizationLogo
  /** –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */
  name: string
  /** –ü—Å–µ–≤–¥–æ–Ω–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π) */
  username: string
}

export type CertificateOutTypeName = string | null

export type CertificateOutStatusName = string | null

export type CertificateOutRegionName = string | null

export type CertificateOutLogo = string | null

export type CertificateOutIsFederal = boolean | null

export type CertificateOutFederalDistrictName = string | null

export type CertificateOutActualEducationOrganization = ActualEducationOrganizationOut | null

export interface CertificateOut {
  actual_education_organization: CertificateOutActualEducationOrganization
  educational_programs?: EducationalProgramOut[]
  federal_district_name: CertificateOutFederalDistrictName
  in_registry_id: string
  is_federal: CertificateOutIsFederal
  logo?: CertificateOutLogo
  region_name: CertificateOutRegionName
  status_name: CertificateOutStatusName
  type_name: CertificateOutTypeName
}

export type BodyUsersRequestApprovementUploadFileObj = Blob | null

export interface BodyUsersRequestApprovement {
  upload_file_obj?: BodyUsersRequestApprovementUploadFileObj
}

export interface BodyOrganizationsImportOrganizations {
  upload_file_obj: Blob
}

export interface BodyFilesUploadFile {
  upload_file_obj: Blob
}

export interface AuthCredentials {
  /** User login */
  login?: string
  /** User password */
  password?: string
}

export type ApprovedApprovementStatus = typeof ApprovedApprovementStatus[keyof typeof ApprovedApprovementStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApprovedApprovementStatus = {
  approved: 'approved',
} as const

/**
 * ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
 */
export type ApprovedApprovementModeratorId = string | null

export interface ApprovedApprovement {
  /** –î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ */
  at: string
  /** ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ */
  moderator_id: ApprovedApprovementModeratorId
  /** ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç */
  organization_id: string
  status: ApprovedApprovementStatus
}

/**
 * –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
 */
export type AnonymousReviewText = string | null

/**
 * –ü–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ –ª–∞–π–∫ –º–Ω–æ–π
 */
export type AnonymousReviewLikedByMe = boolean | null

export interface AnonymousReview {
  /** –ò–º—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  anonymous_name: string
  /** –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ */
  at: string
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞ */
  id: string
  /** –ü–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ –ª–∞–π–∫ –º–Ω–æ–π */
  liked_by_me: AnonymousReviewLikedByMe
  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ */
  likes: number
  /** –û—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–ª–µ–Ω –º–Ω–æ–π */
  mine: boolean
  /**
   * –û—Ü–µ–Ω–∫–∞
   * @minimum 1
   * @maximum 5
   */
  rate: number
  /** –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ */
  text: AnonymousReviewText
}

export type ActualEducationOrganizationOutWebsite = string | null

export type ActualEducationOrganizationOutTypeName = string | null

export type ActualEducationOrganizationOutShortName = string | null

export type ActualEducationOrganizationOutRegionName = string | null

export type ActualEducationOrganizationOutPostAddress = string | null

export type ActualEducationOrganizationOutPhone = string | null

export type ActualEducationOrganizationOutOgrn = string | null

export type ActualEducationOrganizationOutKpp = string | null

export type ActualEducationOrganizationOutKindName = string | null

export type ActualEducationOrganizationOutIsBranch = boolean | null

export type ActualEducationOrganizationOutInn = string | null

export type ActualEducationOrganizationOutInRegistryId = string | null

export type ActualEducationOrganizationOutHeadPost = string | null

export type ActualEducationOrganizationOutHeadName = string | null

export type ActualEducationOrganizationOutHeadEduOrgId = string | null

export type ActualEducationOrganizationOutFullName = string | null

export type ActualEducationOrganizationOutFormName = string | null

export type ActualEducationOrganizationOutFederalDistrictShortName = string | null

export type ActualEducationOrganizationOutFederalDistrictName = string | null

export type ActualEducationOrganizationOutFax = string | null

export type ActualEducationOrganizationOutEmail = string | null

export interface ActualEducationOrganizationOut {
  email: ActualEducationOrganizationOutEmail
  fax: ActualEducationOrganizationOutFax
  federal_district_name: ActualEducationOrganizationOutFederalDistrictName
  federal_district_short_name: ActualEducationOrganizationOutFederalDistrictShortName
  form_name: ActualEducationOrganizationOutFormName
  full_name: ActualEducationOrganizationOutFullName
  head_edu_org_id: ActualEducationOrganizationOutHeadEduOrgId
  head_name: ActualEducationOrganizationOutHeadName
  head_post: ActualEducationOrganizationOutHeadPost
  in_registry_id: ActualEducationOrganizationOutInRegistryId
  inn: ActualEducationOrganizationOutInn
  is_branch: ActualEducationOrganizationOutIsBranch
  kind_name: ActualEducationOrganizationOutKindName
  kpp: ActualEducationOrganizationOutKpp
  ogrn: ActualEducationOrganizationOutOgrn
  phone: ActualEducationOrganizationOutPhone
  post_address: ActualEducationOrganizationOutPostAddress
  region_name: ActualEducationOrganizationOutRegionName
  short_name: ActualEducationOrganizationOutShortName
  type_name: ActualEducationOrganizationOutTypeName
  website: ActualEducationOrganizationOutWebsite
}

type AwaitedInput<T> = PromiseLike<T> | T

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ë—Ä–Ω—É—Ç—ã–π JWT —Ç–æ–∫–µ–Ω.
 * @summary By Credentials
 */
export function providersByCredentials(authCredentials: MaybeRef<AuthCredentials>, options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> {
  authCredentials = unref(authCredentials)
  return axios.post(
      `/providers/credentials/credentials`,
      authCredentials,
      options,
  )
}

export function getProvidersByCredentialsMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof providersByCredentials>>, TError, { data: AuthCredentials }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof providersByCredentials>>, TError, { data: AuthCredentials }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof providersByCredentials>>, { data: AuthCredentials }> = (props) => {
    const { data } = props ?? {}

    return providersByCredentials(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProvidersByCredentialsMutationResult = NonNullable<Awaited<ReturnType<typeof providersByCredentials>>>
export type ProvidersByCredentialsMutationBody = AuthCredentials
export type ProvidersByCredentialsMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary By Credentials
 */
export function useProvidersByCredentials<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof providersByCredentials>>, TError, { data: AuthCredentials }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof providersByCredentials>>,
        TError,
        { data: AuthCredentials },
        TContext
      > {
  const mutationOptions = getProvidersByCredentialsMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Telegram Connect
 */
export function providersTelegramConnect(params: MaybeRef<ProvidersTelegramConnectParams>, options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> {
  params = unref(params)
  return axios.post(
      `/providers/telegram/connect`,
      undefined,
      {
        ...options,
        params: { ...unref(params), ...options?.params },
      },
  )
}

export function getProvidersTelegramConnectMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof providersTelegramConnect>>, TError, { params: ProvidersTelegramConnectParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof providersTelegramConnect>>, TError, { params: ProvidersTelegramConnectParams }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof providersTelegramConnect>>, { params: ProvidersTelegramConnectParams }> = (props) => {
    const { params } = props ?? {}

    return providersTelegramConnect(params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProvidersTelegramConnectMutationResult = NonNullable<Awaited<ReturnType<typeof providersTelegramConnect>>>

export type ProvidersTelegramConnectMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Telegram Connect
 */
export function useProvidersTelegramConnect<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof providersTelegramConnect>>, TError, { params: ProvidersTelegramConnectParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof providersTelegramConnect>>,
        TError,
        { params: ProvidersTelegramConnectParams },
        TContext
      > {
  const mutationOptions = getProvidersTelegramConnectMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Telegram Login
 */
export function providersTelegramLogin(params: MaybeRef<ProvidersTelegramLoginParams>, options?: AxiosRequestConfig): Promise<AxiosResponse<TelegramLoginResponse>> {
  params = unref(params)
  return axios.post(
      `/providers/telegram/login`,
      undefined,
      {
        ...options,
        params: { ...unref(params), ...options?.params },
      },
  )
}

export function getProvidersTelegramLoginMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof providersTelegramLogin>>, TError, { params: ProvidersTelegramLoginParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof providersTelegramLogin>>, TError, { params: ProvidersTelegramLoginParams }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof providersTelegramLogin>>, { params: ProvidersTelegramLoginParams }> = (props) => {
    const { params } = props ?? {}

    return providersTelegramLogin(params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProvidersTelegramLoginMutationResult = NonNullable<Awaited<ReturnType<typeof providersTelegramLogin>>>

export type ProvidersTelegramLoginMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Telegram Login
 */
export function useProvidersTelegramLogin<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof providersTelegramLogin>>, TError, { params: ProvidersTelegramLoginParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof providersTelegramLogin>>,
        TError,
        { params: ProvidersTelegramLoginParams },
        TContext
      > {
  const mutationOptions = getProvidersTelegramLoginMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Me
 */
export function usersGetMe(options?: AxiosRequestConfig): Promise<AxiosResponse<ViewUser>> {
  return axios.get(
      `/users/me`,
      options,
  )
}

export function getUsersGetMeQueryKey() {
  return ['users', 'me'] as const
}

export function getUsersGetMeQueryOptions<TData = Awaited<ReturnType<typeof usersGetMe>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetMe>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getUsersGetMeQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetMe>>> = ({ signal }) => usersGetMe({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof usersGetMe>>, TError, TData>
}

export type UsersGetMeQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetMe>>>
export type UsersGetMeQueryError = AxiosError<void>

/**
 * @summary Get Me
 */
export function useUsersGetMe<TData = Awaited<ReturnType<typeof usersGetMe>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetMe>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersGetMeQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get My Reviews
 */
export function usersGetMyReviews(options?: AxiosRequestConfig): Promise<AxiosResponse<ReviewWithOrganizationInfo[]>> {
  return axios.get(
      `/users/me/reviews`,
      options,
  )
}

export function getUsersGetMyReviewsQueryKey() {
  return ['users', 'me', 'reviews'] as const
}

export function getUsersGetMyReviewsQueryOptions<TData = Awaited<ReturnType<typeof usersGetMyReviews>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetMyReviews>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getUsersGetMyReviewsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetMyReviews>>> = ({ signal }) => usersGetMyReviews({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof usersGetMyReviews>>, TError, TData>
}

export type UsersGetMyReviewsQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetMyReviews>>>
export type UsersGetMyReviewsQueryError = AxiosError<void>

/**
 * @summary Get My Reviews
 */
export function useUsersGetMyReviews<TData = Awaited<ReturnType<typeof usersGetMyReviews>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetMyReviews>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersGetMyReviewsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Set Documents
 */
export function usersSetDocuments(usersSetDocumentsBody: MaybeRef<string[]>, options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> {
  usersSetDocumentsBody = unref(usersSetDocumentsBody)
  return axios.put(
      `/users/me/set-documents`,
      usersSetDocumentsBody,
      options,
  )
}

export function getUsersSetDocumentsMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof usersSetDocuments>>, TError, { data: string[] }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof usersSetDocuments>>, TError, { data: string[] }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersSetDocuments>>, { data: string[] }> = (props) => {
    const { data } = props ?? {}

    return usersSetDocuments(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UsersSetDocumentsMutationResult = NonNullable<Awaited<ReturnType<typeof usersSetDocuments>>>
export type UsersSetDocumentsMutationBody = string[]
export type UsersSetDocumentsMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Set Documents
 */
export function useUsersSetDocuments<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof usersSetDocuments>>, TError, { data: string[] }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof usersSetDocuments>>,
        TError,
        { data: string[] },
        TContext
      > {
  const mutationOptions = getUsersSetDocumentsMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
 * @summary Request Approvement
 */
export function usersRequestApprovement(organizationId: MaybeRef<string>, bodyUsersRequestApprovement: MaybeRef<BodyUsersRequestApprovement>, options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> {
  const formData = customFormDataDocuments(bodyUsersRequestApprovement)
  organizationId = unref(organizationId)
  bodyUsersRequestApprovement = unref(bodyUsersRequestApprovement)
  return axios.put(
      `/users/me/request-approvement/${organizationId}`,
      formData,
      options,
  )
}

export function getUsersRequestApprovementMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof usersRequestApprovement>>, TError, { organizationId: string, data: BodyUsersRequestApprovement }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof usersRequestApprovement>>, TError, { organizationId: string, data: BodyUsersRequestApprovement }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersRequestApprovement>>, { organizationId: string, data: BodyUsersRequestApprovement }> = (props) => {
    const { organizationId, data } = props ?? {}

    return usersRequestApprovement(organizationId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UsersRequestApprovementMutationResult = NonNullable<Awaited<ReturnType<typeof usersRequestApprovement>>>
export type UsersRequestApprovementMutationBody = BodyUsersRequestApprovement
export type UsersRequestApprovementMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Request Approvement
 */
export function useUsersRequestApprovement<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof usersRequestApprovement>>, TError, { organizationId: string, data: BodyUsersRequestApprovement }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof usersRequestApprovement>>,
        TError,
        { organizationId: string, data: BodyUsersRequestApprovement },
        TContext
      > {
  const mutationOptions = getUsersRequestApprovementMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
 * @summary Logout
 */
export function usersLogout(options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> {
  return axios.post(
      `/users/logout`,
      undefined,
      options,
  )
}

export function getUsersLogoutMutationOptions<TError = AxiosError<void>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof usersLogout>>, TError, void, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof usersLogout>>, TError, void, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersLogout>>, void> = () => {
    return usersLogout(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UsersLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof usersLogout>>>

export type UsersLogoutMutationError = AxiosError<void>

/**
 * @summary Logout
 */
export function useUsersLogout<TError = AxiosError<void>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof usersLogout>>, TError, void, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof usersLogout>>,
        TError,
        void,
        TContext
      > {
  const mutationOptions = getUsersLogoutMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–∂–∏–¥–∞—é—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 * @summary Get Users With Pending Approvement
 */
export function usersGetUsersWithPendingApprovement(options?: AxiosRequestConfig): Promise<AxiosResponse<ViewUser[]>> {
  return axios.get(
      `/users/with-pending-approvement`,
      options,
  )
}

export function getUsersGetUsersWithPendingApprovementQueryKey() {
  return ['users', 'with-pending-approvement'] as const
}

export function getUsersGetUsersWithPendingApprovementQueryOptions<TData = Awaited<ReturnType<typeof usersGetUsersWithPendingApprovement>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsersWithPendingApprovement>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getUsersGetUsersWithPendingApprovementQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetUsersWithPendingApprovement>>> = ({ signal }) => usersGetUsersWithPendingApprovement({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof usersGetUsersWithPendingApprovement>>, TError, TData>
}

export type UsersGetUsersWithPendingApprovementQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetUsersWithPendingApprovement>>>
export type UsersGetUsersWithPendingApprovementQueryError = AxiosError<void>

/**
 * @summary Get Users With Pending Approvement
 */
export function useUsersGetUsersWithPendingApprovement<TData = Awaited<ReturnType<typeof usersGetUsersWithPendingApprovement>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsersWithPendingApprovement>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersGetUsersWithPendingApprovementQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 * @summary Get User By Id
 */
export function usersGetUserById(userId: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<ViewUser>> {
  userId = unref(userId)
  return axios.get(
      `/users/by-id/${userId}`,
      options,
  )
}

export function getUsersGetUserByIdQueryKey(userId: MaybeRef<string>) {
  return ['users', 'by-id', userId] as const
}

export function getUsersGetUserByIdQueryOptions<TData = Awaited<ReturnType<typeof usersGetUserById>>, TError = AxiosError<void | HTTPValidationError>>(userId: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUserById>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getUsersGetUserByIdQueryKey(userId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetUserById>>> = ({ signal }) => usersGetUserById(userId, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: computed(() => !!(unref(userId))), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof usersGetUserById>>, TError, TData>
}

export type UsersGetUserByIdQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetUserById>>>
export type UsersGetUserByIdQueryError = AxiosError<void | HTTPValidationError>

/**
 * @summary Get User By Id
 */
export function useUsersGetUserById<TData = Awaited<ReturnType<typeof usersGetUserById>>, TError = AxiosError<void | HTTPValidationError>>(userId: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUserById>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersGetUserByIdQueryOptions(userId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –û–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Approve User
 */
export function usersApproveUser(userId: MaybeRef<string>, params: MaybeRef<UsersApproveUserParams>, options?: AxiosRequestConfig): Promise<AxiosResponse<ViewUser>> {
  userId = unref(userId)
  params = unref(params)
  return axios.post(
      `/users/by-id/${userId}/approve`,
      undefined,
      {
        ...options,
        params: { ...unref(params), ...options?.params },
      },
  )
}

export function getUsersApproveUserMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof usersApproveUser>>, TError, { userId: string, params: UsersApproveUserParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof usersApproveUser>>, TError, { userId: string, params: UsersApproveUserParams }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersApproveUser>>, { userId: string, params: UsersApproveUserParams }> = (props) => {
    const { userId, params } = props ?? {}

    return usersApproveUser(userId, params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UsersApproveUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersApproveUser>>>

export type UsersApproveUserMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Approve User
 */
export function useUsersApproveUser<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof usersApproveUser>>, TError, { userId: string, params: UsersApproveUserParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof usersApproveUser>>,
        TError,
        { userId: string, params: UsersApproveUserParams },
        TContext
      > {
  const mutationOptions = getUsersApproveUserMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ static.
 * @summary Upload File
 */
export function filesUploadFile(bodyFilesUploadFile: MaybeRef<BodyFilesUploadFile>, options?: AxiosRequestConfig): Promise<AxiosResponse<File>> {
  const formData = customFormData(bodyFilesUploadFile)
  bodyFilesUploadFile = unref(bodyFilesUploadFile)
  return axios.post(
      `/files/upload`,
      formData,
      options,
  )
}

export function getFilesUploadFileMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof filesUploadFile>>, TError, { data: BodyFilesUploadFile }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof filesUploadFile>>, TError, { data: BodyFilesUploadFile }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof filesUploadFile>>, { data: BodyFilesUploadFile }> = (props) => {
    const { data } = props ?? {}

    return filesUploadFile(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type FilesUploadFileMutationResult = NonNullable<Awaited<ReturnType<typeof filesUploadFile>>>
export type FilesUploadFileMutationBody = BodyFilesUploadFile
export type FilesUploadFileMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Upload File
 */
export function useFilesUploadFile<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof filesUploadFile>>, TError, { data: BodyFilesUploadFile }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof filesUploadFile>>,
        TError,
        { data: BodyFilesUploadFile },
        TContext
      > {
  const mutationOptions = getFilesUploadFileMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤.
 * @summary Get All Files
 */
export function filesGetAllFiles(options?: AxiosRequestConfig): Promise<AxiosResponse<File[]>> {
  return axios.get(
      `/files/`,
      options,
  )
}

export function getFilesGetAllFilesQueryKey() {
  return ['files'] as const
}

export function getFilesGetAllFilesQueryOptions<TData = Awaited<ReturnType<typeof filesGetAllFiles>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof filesGetAllFiles>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getFilesGetAllFilesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof filesGetAllFiles>>> = ({ signal }) => filesGetAllFiles({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof filesGetAllFiles>>, TError, TData>
}

export type FilesGetAllFilesQueryResult = NonNullable<Awaited<ReturnType<typeof filesGetAllFiles>>>
export type FilesGetAllFilesQueryError = AxiosError<void>

/**
 * @summary Get All Files
 */
export function useFilesGetAllFiles<TData = Awaited<ReturnType<typeof filesGetAllFiles>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof filesGetAllFiles>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFilesGetAllFilesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ø–æ –µ–≥–æ id.
 * @summary Get File
 */
export function filesGetFile(objId: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<File>> {
  objId = unref(objId)
  return axios.get(
      `/files/${objId}`,
      options,
  )
}

export function getFilesGetFileQueryKey(objId: MaybeRef<string>) {
  return ['files', objId] as const
}

export function getFilesGetFileQueryOptions<TData = Awaited<ReturnType<typeof filesGetFile>>, TError = AxiosError<void | HTTPValidationError>>(objId: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof filesGetFile>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getFilesGetFileQueryKey(objId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof filesGetFile>>> = ({ signal }) => filesGetFile(objId, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: computed(() => !!(unref(objId))), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof filesGetFile>>, TError, TData>
}

export type FilesGetFileQueryResult = NonNullable<Awaited<ReturnType<typeof filesGetFile>>>
export type FilesGetFileQueryError = AxiosError<void | HTTPValidationError>

/**
 * @summary Get File
 */
export function useFilesGetFile<TData = Awaited<ReturnType<typeof filesGetFile>>, TError = AxiosError<void | HTTPValidationError>>(objId: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof filesGetFile>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFilesGetFileQueryOptions(objId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary Delete File
 */
export function filesDeleteFile(objId: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
  objId = unref(objId)
  return axios.delete(
      `/files/${objId}`,
      options,
  )
}

export function getFilesDeleteFileMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof filesDeleteFile>>, TError, { objId: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof filesDeleteFile>>, TError, { objId: string }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof filesDeleteFile>>, { objId: string }> = (props) => {
    const { objId } = props ?? {}

    return filesDeleteFile(objId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type FilesDeleteFileMutationResult = NonNullable<Awaited<ReturnType<typeof filesDeleteFile>>>

export type FilesDeleteFileMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Delete File
 */
export function useFilesDeleteFile<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof filesDeleteFile>>, TError, { objId: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof filesDeleteFile>>,
        TError,
        { objId: string },
        TContext
      > {
  const mutationOptions = getFilesDeleteFileMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª. –í —Ç–æ–º —á–∏—Å–ª–µ, –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ –¥—Ä—É–≥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å.
 * @summary Update File
 */
export function filesUpdateFile(objId: MaybeRef<string>, updateFile: MaybeRef<UpdateFile>, options?: AxiosRequestConfig): Promise<AxiosResponse<File>> {
  objId = unref(objId)
  updateFile = unref(updateFile)
  return axios.patch(
      `/files/${objId}`,
      updateFile,
      options,
  )
}

export function getFilesUpdateFileMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof filesUpdateFile>>, TError, { objId: string, data: UpdateFile }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof filesUpdateFile>>, TError, { objId: string, data: UpdateFile }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof filesUpdateFile>>, { objId: string, data: UpdateFile }> = (props) => {
    const { objId, data } = props ?? {}

    return filesUpdateFile(objId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type FilesUpdateFileMutationResult = NonNullable<Awaited<ReturnType<typeof filesUpdateFile>>>
export type FilesUpdateFileMutationBody = UpdateFile
export type FilesUpdateFileMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Update File
 */
export function useFilesUpdateFile<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof filesUpdateFile>>, TError, { objId: string, data: UpdateFile }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof filesUpdateFile>>,
        TError,
        { objId: string, data: UpdateFile },
        TContext
      > {
  const mutationOptions = getFilesUpdateFileMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Read All
 */
export function organizationsReadAll(options?: AxiosRequestConfig): Promise<AxiosResponse<CompactOrganization[]>> {
  return axios.get(
      `/organizations/`,
      options,
  )
}

export function getOrganizationsReadAllQueryKey() {
  return ['organizations'] as const
}

export function getOrganizationsReadAllQueryOptions<TData = Awaited<ReturnType<typeof organizationsReadAll>>, TError = AxiosError<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsReadAll>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getOrganizationsReadAllQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsReadAll>>> = ({ signal }) => organizationsReadAll({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof organizationsReadAll>>, TError, TData>
}

export type OrganizationsReadAllQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsReadAll>>>
export type OrganizationsReadAllQueryError = AxiosError<unknown>

/**
 * @summary Read All
 */
export function useOrganizationsReadAll<TData = Awaited<ReturnType<typeof organizationsReadAll>>, TError = AxiosError<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsReadAll>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsReadAllQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary  Create
 */
export function organizationsCreate(createOrganization: MaybeRef<CreateOrganization>, options?: AxiosRequestConfig): Promise<AxiosResponse<Organization>> {
  createOrganization = unref(createOrganization)
  return axios.post(
      `/organizations/`,
      createOrganization,
      options,
  )
}

export function getOrganizationsCreateMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsCreate>>, TError, { data: CreateOrganization }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof organizationsCreate>>, TError, { data: CreateOrganization }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsCreate>>, { data: CreateOrganization }> = (props) => {
    const { data } = props ?? {}

    return organizationsCreate(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsCreate>>>
export type OrganizationsCreateMutationBody = CreateOrganization
export type OrganizationsCreateMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary  Create
 */
export function useOrganizationsCreate<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsCreate>>, TError, { data: CreateOrganization }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof organizationsCreate>>,
        TError,
        { data: CreateOrganization },
        TContext
      > {
  const mutationOptions = getOrganizationsCreateMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary  Read
 */
export function organizationsRead(id: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Organization>> {
  id = unref(id)
  return axios.get(
      `/organizations/${id}`,
      options,
  )
}

export function getOrganizationsReadQueryKey(id: MaybeRef<string>) {
  return ['organizations', id] as const
}

export function getOrganizationsReadQueryOptions<TData = Awaited<ReturnType<typeof organizationsRead>>, TError = AxiosError<void | HTTPValidationError>>(id: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsRead>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getOrganizationsReadQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsRead>>> = ({ signal }) => organizationsRead(id, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof organizationsRead>>, TError, TData>
}

export type OrganizationsReadQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsRead>>>
export type OrganizationsReadQueryError = AxiosError<void | HTTPValidationError>

/**
 * @summary  Read
 */
export function useOrganizationsRead<TData = Awaited<ReturnType<typeof organizationsRead>>, TError = AxiosError<void | HTTPValidationError>>(id: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsRead>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsReadQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary  Update
 */
export function organizationsUpdate(id: MaybeRef<string>, updateOrganization: MaybeRef<UpdateOrganization>, options?: AxiosRequestConfig): Promise<AxiosResponse<Organization>> {
  id = unref(id)
  updateOrganization = unref(updateOrganization)
  return axios.patch(
      `/organizations/${id}`,
      updateOrganization,
      options,
  )
}

export function getOrganizationsUpdateMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsUpdate>>, TError, { id: string, data: UpdateOrganization }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof organizationsUpdate>>, TError, { id: string, data: UpdateOrganization }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsUpdate>>, { id: string, data: UpdateOrganization }> = (props) => {
    const { id, data } = props ?? {}

    return organizationsUpdate(id, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsUpdate>>>
export type OrganizationsUpdateMutationBody = UpdateOrganization
export type OrganizationsUpdateMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary  Update
 */
export function useOrganizationsUpdate<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsUpdate>>, TError, { id: string, data: UpdateOrganization }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof organizationsUpdate>>,
        TError,
        { id: string, data: UpdateOrganization },
        TContext
      > {
  const mutationOptions = getOrganizationsUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary  Delete
 */
export function organizationsDelete(id: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
  id = unref(id)
  return axios.delete(
      `/organizations/${id}`,
      options,
  )
}

export function getOrganizationsDeleteMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsDelete>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof organizationsDelete>>, TError, { id: string }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsDelete>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return organizationsDelete(id, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsDelete>>>

export type OrganizationsDeleteMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary  Delete
 */
export function useOrganizationsDelete<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsDelete>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof organizationsDelete>>,
        TError,
        { id: string },
        TContext
      > {
  const mutationOptions = getOrganizationsDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get By Username
 */
export function organizationsGetByUsername(username: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Organization>> {
  username = unref(username)
  return axios.get(
      `/organizations/by-username/${username}`,
      options,
  )
}

export function getOrganizationsGetByUsernameQueryKey(username: MaybeRef<string>) {
  return ['organizations', 'by-username', username] as const
}

export function getOrganizationsGetByUsernameQueryOptions<TData = Awaited<ReturnType<typeof organizationsGetByUsername>>, TError = AxiosError<void | HTTPValidationError>>(username: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsGetByUsername>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getOrganizationsGetByUsernameQueryKey(username)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsGetByUsername>>> = ({ signal }) => organizationsGetByUsername(username, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: computed(() => !!(unref(username))), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof organizationsGetByUsername>>, TError, TData>
}

export type OrganizationsGetByUsernameQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsGetByUsername>>>
export type OrganizationsGetByUsernameQueryError = AxiosError<void | HTTPValidationError>

/**
 * @summary Get By Username
 */
export function useOrganizationsGetByUsername<TData = Awaited<ReturnType<typeof organizationsGetByUsername>>, TError = AxiosError<void | HTTPValidationError>>(username: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsGetByUsername>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsGetByUsernameQueryOptions(username, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 * @summary Post Review
 */
export function organizationsPostReview(organizationId: MaybeRef<string>, postReview: MaybeRef<PostReview>, options?: AxiosRequestConfig): Promise<AxiosResponse<Review>> {
  organizationId = unref(organizationId)
  postReview = unref(postReview)
  return axios.post(
      `/organizations/${organizationId}/reviews/`,
      postReview,
      options,
  )
}

export function getOrganizationsPostReviewMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsPostReview>>, TError, { organizationId: string, data: PostReview }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof organizationsPostReview>>, TError, { organizationId: string, data: PostReview }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsPostReview>>, { organizationId: string, data: PostReview }> = (props) => {
    const { organizationId, data } = props ?? {}

    return organizationsPostReview(organizationId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsPostReviewMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsPostReview>>>
export type OrganizationsPostReviewMutationBody = PostReview
export type OrganizationsPostReviewMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Post Review
 */
export function useOrganizationsPostReview<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsPostReview>>, TError, { organizationId: string, data: PostReview }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof organizationsPostReview>>,
        TError,
        { organizationId: string, data: PostReview },
        TContext
      > {
  const mutationOptions = getOrganizationsPostReviewMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 * @summary Get Reviews
 */
export function organizationsGetReviews(organizationId: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<AnonymousReview[]>> {
  organizationId = unref(organizationId)
  return axios.get(
      `/organizations/${organizationId}/reviews/`,
      options,
  )
}

export function getOrganizationsGetReviewsQueryKey(organizationId: MaybeRef<string>) {
  return ['organizations', organizationId, 'reviews'] as const
}

export function getOrganizationsGetReviewsQueryOptions<TData = Awaited<ReturnType<typeof organizationsGetReviews>>, TError = AxiosError<void | HTTPValidationError>>(organizationId: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsGetReviews>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getOrganizationsGetReviewsQueryKey(organizationId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsGetReviews>>> = ({ signal }) => organizationsGetReviews(organizationId, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: computed(() => !!(unref(organizationId))), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof organizationsGetReviews>>, TError, TData>
}

export type OrganizationsGetReviewsQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsGetReviews>>>
export type OrganizationsGetReviewsQueryError = AxiosError<void | HTTPValidationError>

/**
 * @summary Get Reviews
 */
export function useOrganizationsGetReviews<TData = Awaited<ReturnType<typeof organizationsGetReviews>>, TError = AxiosError<void | HTTPValidationError>>(organizationId: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsGetReviews>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsGetReviewsQueryOptions(organizationId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ JSON –¥–∞–º–ø–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä–∏–ø—Ç–∞ `parse_organizations.py`)
 * @summary Import Organizations
 */
export function organizationsImportOrganizations(bodyOrganizationsImportOrganizations: MaybeRef<BodyOrganizationsImportOrganizations>, options?: AxiosRequestConfig): Promise<AxiosResponse<string[]>> {
  const formData = customFormData(bodyOrganizationsImportOrganizations)
  bodyOrganizationsImportOrganizations = unref(bodyOrganizationsImportOrganizations)
  return axios.post(
      `/organizations/import`,
      formData,
      options,
  )
}

export function getOrganizationsImportOrganizationsMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsImportOrganizations>>, TError, { data: BodyOrganizationsImportOrganizations }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof organizationsImportOrganizations>>, TError, { data: BodyOrganizationsImportOrganizations }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsImportOrganizations>>, { data: BodyOrganizationsImportOrganizations }> = (props) => {
    const { data } = props ?? {}

    return organizationsImportOrganizations(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsImportOrganizationsMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsImportOrganizations>>>
export type OrganizationsImportOrganizationsMutationBody = BodyOrganizationsImportOrganizations
export type OrganizationsImportOrganizationsMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Import Organizations
 */
export function useOrganizationsImportOrganizations<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsImportOrganizations>>, TError, { data: BodyOrganizationsImportOrganizations }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof organizationsImportOrganizations>>,
        TError,
        { data: BodyOrganizationsImportOrganizations },
        TContext
      > {
  const mutationOptions = getOrganizationsImportOrganizationsMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ JSON –¥–∞–º–ø–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä–∏–ø—Ç–∞ `parse_organizations.py`)
 * @summary Import Specific Organization
 */
export function organizationsImportSpecificOrganization(organizationId: MaybeRef<string>, certificateOut: MaybeRef<CertificateOut>, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationsImportSpecificOrganization201>> {
  organizationId = unref(organizationId)
  certificateOut = unref(certificateOut)
  return axios.post(
      `/organizations/import/${organizationId}`,
      certificateOut,
      options,
  )
}

export function getOrganizationsImportSpecificOrganizationMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsImportSpecificOrganization>>, TError, { organizationId: string, data: CertificateOut }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof organizationsImportSpecificOrganization>>, TError, { organizationId: string, data: CertificateOut }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsImportSpecificOrganization>>, { organizationId: string, data: CertificateOut }> = (props) => {
    const { organizationId, data } = props ?? {}

    return organizationsImportSpecificOrganization(organizationId, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsImportSpecificOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsImportSpecificOrganization>>>
export type OrganizationsImportSpecificOrganizationMutationBody = CertificateOut
export type OrganizationsImportSpecificOrganizationMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Import Specific Organization
 */
export function useOrganizationsImportSpecificOrganization<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof organizationsImportSpecificOrganization>>, TError, { organizationId: string, data: CertificateOut }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof organizationsImportSpecificOrganization>>,
        TError,
        { organizationId: string, data: CertificateOut },
        TContext
      > {
  const mutationOptions = getOrganizationsImportSpecificOrganizationMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Read All
 */
export function scenesReadAll(options?: AxiosRequestConfig): Promise<AxiosResponse<Scene[]>> {
  return axios.get(
      `/scenes/`,
      options,
  )
}

export function getScenesReadAllQueryKey() {
  return ['scenes'] as const
}

export function getScenesReadAllQueryOptions<TData = Awaited<ReturnType<typeof scenesReadAll>>, TError = AxiosError<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scenesReadAll>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getScenesReadAllQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof scenesReadAll>>> = ({ signal }) => scenesReadAll({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof scenesReadAll>>, TError, TData>
}

export type ScenesReadAllQueryResult = NonNullable<Awaited<ReturnType<typeof scenesReadAll>>>
export type ScenesReadAllQueryError = AxiosError<unknown>

/**
 * @summary Read All
 */
export function useScenesReadAll<TData = Awaited<ReturnType<typeof scenesReadAll>>, TError = AxiosError<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scenesReadAll>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getScenesReadAllQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary  Create
 */
export function scenesCreate(createScene: MaybeRef<CreateScene>, options?: AxiosRequestConfig): Promise<AxiosResponse<Scene>> {
  createScene = unref(createScene)
  return axios.post(
      `/scenes/`,
      createScene,
      options,
  )
}

export function getScenesCreateMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof scenesCreate>>, TError, { data: CreateScene }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof scenesCreate>>, TError, { data: CreateScene }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof scenesCreate>>, { data: CreateScene }> = (props) => {
    const { data } = props ?? {}

    return scenesCreate(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ScenesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof scenesCreate>>>
export type ScenesCreateMutationBody = CreateScene
export type ScenesCreateMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary  Create
 */
export function useScenesCreate<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof scenesCreate>>, TError, { data: CreateScene }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof scenesCreate>>,
        TError,
        { data: CreateScene },
        TContext
      > {
  const mutationOptions = getScenesCreateMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary  Read
 */
export function scenesRead(id: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Scene>> {
  id = unref(id)
  return axios.get(
      `/scenes/${id}`,
      options,
  )
}

export function getScenesReadQueryKey(id: MaybeRef<string>) {
  return ['scenes', id] as const
}

export function getScenesReadQueryOptions<TData = Awaited<ReturnType<typeof scenesRead>>, TError = AxiosError<void | HTTPValidationError>>(id: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scenesRead>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getScenesReadQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof scenesRead>>> = ({ signal }) => scenesRead(id, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof scenesRead>>, TError, TData>
}

export type ScenesReadQueryResult = NonNullable<Awaited<ReturnType<typeof scenesRead>>>
export type ScenesReadQueryError = AxiosError<void | HTTPValidationError>

/**
 * @summary  Read
 */
export function useScenesRead<TData = Awaited<ReturnType<typeof scenesRead>>, TError = AxiosError<void | HTTPValidationError>>(id: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scenesRead>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getScenesReadQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * @summary  Update
 */
export function scenesUpdate(id: MaybeRef<string>, updateScene: MaybeRef<UpdateScene>, options?: AxiosRequestConfig): Promise<AxiosResponse<Scene>> {
  id = unref(id)
  updateScene = unref(updateScene)
  return axios.patch(
      `/scenes/${id}`,
      updateScene,
      options,
  )
}

export function getScenesUpdateMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof scenesUpdate>>, TError, { id: string, data: UpdateScene }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof scenesUpdate>>, TError, { id: string, data: UpdateScene }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof scenesUpdate>>, { id: string, data: UpdateScene }> = (props) => {
    const { id, data } = props ?? {}

    return scenesUpdate(id, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ScenesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof scenesUpdate>>>
export type ScenesUpdateMutationBody = UpdateScene
export type ScenesUpdateMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary  Update
 */
export function useScenesUpdate<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof scenesUpdate>>, TError, { id: string, data: UpdateScene }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof scenesUpdate>>,
        TError,
        { id: string, data: UpdateScene },
        TContext
      > {
  const mutationOptions = getScenesUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary  Delete
 */
export function scenesDelete(id: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
  id = unref(id)
  return axios.delete(
      `/scenes/${id}`,
      options,
  )
}

export function getScenesDeleteMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof scenesDelete>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof scenesDelete>>, TError, { id: string }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof scenesDelete>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return scenesDelete(id, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ScenesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof scenesDelete>>>

export type ScenesDeleteMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary  Delete
 */
export function useScenesDelete<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof scenesDelete>>, TError, { id: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof scenesDelete>>,
        TError,
        { id: string },
        TContext
      > {
  const mutationOptions = getScenesDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ü–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
 * @summary Get Scenes For Organization
 */
export function scenesGetScenesForOrganization(id: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Scene[]>> {
  id = unref(id)
  return axios.get(
      `/scenes/for-organization/${id}`,
      options,
  )
}

export function getScenesGetScenesForOrganizationQueryKey(id: MaybeRef<string>) {
  return ['scenes', 'for-organization', id] as const
}

export function getScenesGetScenesForOrganizationQueryOptions<TData = Awaited<ReturnType<typeof scenesGetScenesForOrganization>>, TError = AxiosError<HTTPValidationError>>(id: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scenesGetScenesForOrganization>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getScenesGetScenesForOrganizationQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof scenesGetScenesForOrganization>>> = ({ signal }) => scenesGetScenesForOrganization(id, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof scenesGetScenesForOrganization>>, TError, TData>
}

export type ScenesGetScenesForOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof scenesGetScenesForOrganization>>>
export type ScenesGetScenesForOrganizationQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Scenes For Organization
 */
export function useScenesGetScenesForOrganization<TData = Awaited<ReturnType<typeof scenesGetScenesForOrganization>>, TError = AxiosError<HTTPValidationError>>(id: MaybeRef<string>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scenesGetScenesForOrganization>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getScenesGetScenesForOrganizationQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤
 * @summary Update Queue
 */
export function chattingUpdateQueue(organizationId: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<ChattingUpdateQueue200>> {
  organizationId = unref(organizationId)
  return axios.post(
      `/chatting/chat-queue/update-enrollee-queue/${organizationId}`,
      undefined,
      options,
  )
}

export function getChattingUpdateQueueMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingUpdateQueue>>, TError, { organizationId: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof chattingUpdateQueue>>, TError, { organizationId: string }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof chattingUpdateQueue>>, { organizationId: string }> = (props) => {
    const { organizationId } = props ?? {}

    return chattingUpdateQueue(organizationId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChattingUpdateQueueMutationResult = NonNullable<Awaited<ReturnType<typeof chattingUpdateQueue>>>

export type ChattingUpdateQueueMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Update Queue
 */
export function useChattingUpdateQueue<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingUpdateQueue>>, TError, { organizationId: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof chattingUpdateQueue>>,
        TError,
        { organizationId: string },
        TContext
      > {
  const mutationOptions = getChattingUpdateQueueMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
 * @summary Update Students Queue
 */
export function chattingUpdateStudentsQueue(organizationId: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<ChattingUpdateStudentsQueue200>> {
  organizationId = unref(organizationId)
  return axios.post(
      `/chatting/chat-queue/update-students-queue/${organizationId}`,
      undefined,
      options,
  )
}

export function getChattingUpdateStudentsQueueMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingUpdateStudentsQueue>>, TError, { organizationId: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof chattingUpdateStudentsQueue>>, TError, { organizationId: string }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof chattingUpdateStudentsQueue>>, { organizationId: string }> = (props) => {
    const { organizationId } = props ?? {}

    return chattingUpdateStudentsQueue(organizationId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChattingUpdateStudentsQueueMutationResult = NonNullable<Awaited<ReturnType<typeof chattingUpdateStudentsQueue>>>

export type ChattingUpdateStudentsQueueMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Update Students Queue
 */
export function useChattingUpdateStudentsQueue<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingUpdateStudentsQueue>>, TError, { organizationId: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof chattingUpdateStudentsQueue>>,
        TError,
        { organizationId: string },
        TContext
      > {
  const mutationOptions = getChattingUpdateStudentsQueueMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
 * @summary Leave Queue
 */
export function chattingLeaveQueue(organizationId: MaybeRef<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> {
  organizationId = unref(organizationId)
  return axios.post(
      `/chatting/chat-queue/leave-queue/${organizationId}`,
      undefined,
      options,
  )
}

export function getChattingLeaveQueueMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingLeaveQueue>>, TError, { organizationId: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof chattingLeaveQueue>>, TError, { organizationId: string }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof chattingLeaveQueue>>, { organizationId: string }> = (props) => {
    const { organizationId } = props ?? {}

    return chattingLeaveQueue(organizationId, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChattingLeaveQueueMutationResult = NonNullable<Awaited<ReturnType<typeof chattingLeaveQueue>>>

export type ChattingLeaveQueueMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Leave Queue
 */
export function useChattingLeaveQueue<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingLeaveQueue>>, TError, { organizationId: string }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof chattingLeaveQueue>>,
        TError,
        { organizationId: string },
        TContext
      > {
  const mutationOptions = getChattingLeaveQueueMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ü–æ–∫–∏–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥
 * @summary Leave Dialog
 */
export function chattingLeaveDialog(params: MaybeRef<ChattingLeaveDialogParams>, options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> {
  params = unref(params)
  return axios.post(
      `/chatting/dialogs/leave-dialog`,
      undefined,
      {
        ...options,
        params: { ...unref(params), ...options?.params },
      },
  )
}

export function getChattingLeaveDialogMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingLeaveDialog>>, TError, { params: ChattingLeaveDialogParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof chattingLeaveDialog>>, TError, { params: ChattingLeaveDialogParams }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof chattingLeaveDialog>>, { params: ChattingLeaveDialogParams }> = (props) => {
    const { params } = props ?? {}

    return chattingLeaveDialog(params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChattingLeaveDialogMutationResult = NonNullable<Awaited<ReturnType<typeof chattingLeaveDialog>>>

export type ChattingLeaveDialogMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Leave Dialog
 */
export function useChattingLeaveDialog<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingLeaveDialog>>, TError, { params: ChattingLeaveDialogParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof chattingLeaveDialog>>,
        TError,
        { params: ChattingLeaveDialogParams },
        TContext
      > {
  const mutationOptions = getChattingLeaveDialogMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥
 * @summary Push Message
 */
export function chattingPushMessage(params: MaybeRef<ChattingPushMessageParams>, options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> {
  params = unref(params)
  return axios.post(
      `/chatting/dialogs/push-message`,
      undefined,
      {
        ...options,
        params: { ...unref(params), ...options?.params },
      },
  )
}

export function getChattingPushMessageMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingPushMessage>>, TError, { params: ChattingPushMessageParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof chattingPushMessage>>, TError, { params: ChattingPushMessageParams }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof chattingPushMessage>>, { params: ChattingPushMessageParams }> = (props) => {
    const { params } = props ?? {}

    return chattingPushMessage(params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChattingPushMessageMutationResult = NonNullable<Awaited<ReturnType<typeof chattingPushMessage>>>

export type ChattingPushMessageMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Push Message
 */
export function useChattingPushMessage<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof chattingPushMessage>>, TError, { params: ChattingPushMessageParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof chattingPushMessage>>,
        TError,
        { params: ChattingPushMessageParams },
        TContext
      > {
  const mutationOptions = getChattingPushMessageMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥
 * @summary Get Dialog
 */
export function chattingGetDialog(params: MaybeRef<ChattingGetDialogParams>, options?: AxiosRequestConfig): Promise<AxiosResponse<Dialog>> {
  params = unref(params)
  return axios.get(
      `/chatting/dialogs/get-dialog`,
      {
        ...options,
        params: { ...unref(params), ...options?.params },
      },
  )
}

export function getChattingGetDialogQueryKey(params: MaybeRef<ChattingGetDialogParams>) {
  return ['chatting', 'dialogs', 'get-dialog', ...(params ? [params] : [])] as const
}

export function getChattingGetDialogQueryOptions<TData = Awaited<ReturnType<typeof chattingGetDialog>>, TError = AxiosError<void | HTTPValidationError>>(params: MaybeRef<ChattingGetDialogParams>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof chattingGetDialog>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getChattingGetDialogQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chattingGetDialog>>> = ({ signal }) => chattingGetDialog(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof chattingGetDialog>>, TError, TData>
}

export type ChattingGetDialogQueryResult = NonNullable<Awaited<ReturnType<typeof chattingGetDialog>>>
export type ChattingGetDialogQueryError = AxiosError<void | HTTPValidationError>

/**
 * @summary Get Dialog
 */
export function useChattingGetDialog<TData = Awaited<ReturnType<typeof chattingGetDialog>>, TError = AxiosError<void | HTTPValidationError>>(params: MaybeRef<ChattingGetDialogParams>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof chattingGetDialog>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getChattingGetDialogQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –¥–∏–∞–ª–æ–≥–∏
 * @summary Get My Dialogs
 */
export function chattingGetMyDialogs(options?: AxiosRequestConfig): Promise<AxiosResponse<Dialog[]>> {
  return axios.get(
      `/chatting/dialogs/get-my-dialogs`,
      options,
  )
}

export function getChattingGetMyDialogsQueryKey() {
  return ['chatting', 'dialogs', 'get-my-dialogs'] as const
}

export function getChattingGetMyDialogsQueryOptions<TData = Awaited<ReturnType<typeof chattingGetMyDialogs>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof chattingGetMyDialogs>>, TError, TData>>, axios?: AxiosRequestConfig }) {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = getChattingGetMyDialogsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chattingGetMyDialogs>>> = ({ signal }) => chattingGetMyDialogs({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof chattingGetMyDialogs>>, TError, TData>
}

export type ChattingGetMyDialogsQueryResult = NonNullable<Awaited<ReturnType<typeof chattingGetMyDialogs>>>
export type ChattingGetMyDialogsQueryError = AxiosError<void>

/**
 * @summary Get My Dialogs
 */
export function useChattingGetMyDialogs<TData = Awaited<ReturnType<typeof chattingGetMyDialogs>>, TError = AxiosError<void>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof chattingGetMyDialogs>>, TError, TData>>, axios?: AxiosRequestConfig }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getChattingGetMyDialogsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

/**
 * –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ –æ—Ç–∑—ã–≤—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ª–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω, False –µ—Å–ª–∏ —É–±—Ä–∞–Ω –∏–ª–∏ 404 –µ—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω
 * @summary Like Review
 */
export function reviewsLikeReview(reviewId: MaybeRef<string>, params?: MaybeRef<ReviewsLikeReviewParams>, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
  reviewId = unref(reviewId)
  params = unref(params)
  return axios.post(
      `/reviews/${reviewId}/like`,
      undefined,
      {
        ...options,
        params: { ...unref(params), ...options?.params },
      },
  )
}

export function getReviewsLikeReviewMutationOptions<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof reviewsLikeReview>>, TError, { reviewId: string, params?: ReviewsLikeReviewParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationOptions<Awaited<ReturnType<typeof reviewsLikeReview>>, TError, { reviewId: string, params?: ReviewsLikeReviewParams }, TContext> {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof reviewsLikeReview>>, { reviewId: string, params?: ReviewsLikeReviewParams }> = (props) => {
    const { reviewId, params } = props ?? {}

    return reviewsLikeReview(reviewId, params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReviewsLikeReviewMutationResult = NonNullable<Awaited<ReturnType<typeof reviewsLikeReview>>>

export type ReviewsLikeReviewMutationError = AxiosError<void | HTTPValidationError>

/**
 * @summary Like Review
 */
export function useReviewsLikeReview<TError = AxiosError<void | HTTPValidationError>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof reviewsLikeReview>>, TError, { reviewId: string, params?: ReviewsLikeReviewParams }, TContext>, axios?: AxiosRequestConfig }): UseMutationReturnType<
        Awaited<ReturnType<typeof reviewsLikeReview>>,
        TError,
        { reviewId: string, params?: ReviewsLikeReviewParams },
        TContext
      > {
  const mutationOptions = getReviewsLikeReviewMutationOptions(options)

  return useMutation(mutationOptions)
}
